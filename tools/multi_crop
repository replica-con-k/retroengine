#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
#

import sys
import glob
import pygame
import os.path
import argparse

import logging
_INF = logging.info
_DEB = logging.debug
_ERR = logging.error
_WRN = logging.warning
logging.basicConfig(level=logging.INFO)


def main():
    user_config = parse_command_line()
    files = []
    for file_name in user_config.FILES:
        files += glob.glob(file_name)
    files.sort()
    _DEB('Checking files...')
    for filename in files:
        if not os.path.exists(filename):
            _ERR('File not found: %s' % filename)
            sys.exit(-1)

    # Start pygame
    pygame.init()
    disp = pygame.display.set_mode((320,240))

    biggest_crop = None
    images = []
    for filename in files:
        _DEB('Loading %s...' % filename)
        image = pygame.image.load(filename).convert_alpha()
        images.append(image)
        image_rect = image.get_rect()
        total_size = image_rect.size
        crop_rect = image.get_bounding_rect()
        crop_size = crop_rect.size
        _DEB('Resolution: %sx%s' % total_size)
        _DEB('Crop resolution: %sx%s' % crop_size)
        if biggest_crop is None:
            biggest_crop = crop_rect
            continue
        biggest_crop.union_ip(crop_rect)
    _DEB('Crop area: %s' % biggest_crop)
    img_no = 0
    for image in images:
        original_file = files[img_no]
        new_file = original_file[:-4] + '_crop.png'
        img_no += 1
        try:
            crop = image.subsurface(biggest_crop).copy().convert_alpha()
        except ValueError:
            _WRN('Cannot crop file: %s' % original_file)
            continue
        pygame.image.save(crop, new_file)
    pygame.quit()
        
        
def parse_command_line():
    parser = argparse.ArgumentParser()
    parser.add_argument('FILES', nargs='*')
    args = parser.parse_args()
    return args


if __name__ == '__main__':
    main()
    sys.exit(0)
